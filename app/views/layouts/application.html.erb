<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= stylesheet_link_tag "application", media: 'all', "data-turbo-track": "reload" %>
    <%= javascript_include_tag "application", "data-turbo-track": "reload", type: "module" %>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
      />  
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
      <link href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" rel="stylesheet">
    <style>
      #modal, #response-modal {
        display: none;
      }
    </style>
    <title>ReminderChat</title>
    <script charset="utf-8" src="https://static.line-scdn.net/liff/edge/versions/2.22.3/sdk.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
  </head>

  <body data-turbolinks="false">
    <%= yield %>
    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const logoutButton = document.getElementById('logoutButton');
        if (logoutButton) {
          logoutButton.addEventListener('click', function () {
            eraseCookie("sessionToken");

            fetch('/logout', {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              }
            }).then(response => {
              if (response.ok) {
                if (typeof liff !== 'undefined') {
                  liff.logout().then(() => {
                    location.reload();
                  }).catch((err) => {
                    console.error('LIFF logout failed', err);
                    location.reload();
                  });
                } else {
                  location.reload();
                }
              } else {
                console.error('Logout failed');
              }
            });
          });
        }

        function setCookie(name, value, days) {
          let expires = "";
          if (days) {
            const date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
          }
          document.cookie = name + "=" + (value || "") + expires + "; path=/";
        }

        function getCookie(name) {
          const nameEQ = name + "=";
          const ca = document.cookie.split(';');
          for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
          }
          return null;
        }

        function eraseCookie(name) {
          document.cookie = name + '=; Max-Age=-99999999;';
        }

        function isTokenValid(token) {
          try {
            const tokenParts = token.split('.');
            if (tokenParts.length !== 3) {
              console.error('Invalid token format');
              return false;
            }
            const tokenData = JSON.parse(atob(tokenParts[1]));
            const expiryTime = tokenData.exp * 1000;
            const currentTime = new Date().getTime();
            console.log(`Token expiry time: ${expiryTime}, current time: ${currentTime}`);
            return currentTime < expiryTime;
          } catch (e) {
            console.error('Invalid token format', e);
            return false;
          }
        }

        function displayCalendarWithToken(token) {
          console.log("Displaying calendar with token:", token);
        }

        const sessionToken = getCookie("sessionToken");
        console.log("Session Token:", sessionToken);

        if (sessionToken && isTokenValid(sessionToken)) {
          console.log("Valid session token found");
          displayCalendarWithToken(sessionToken);
        } else {
          if (typeof liff !== 'undefined') {
            console.log('Initializing LIFF');
            liff.init({
              liffId: "2003779201-OwqpG72P"
            }).then(() => {
              console.log('LIFF initialized');
              if (liff.isLoggedIn()) {
                console.log('User is logged in');
                const accessToken = liff.getAccessToken();
                console.log("Access Token:", accessToken);
                if (accessToken && isTokenValid(accessToken)) {
                  setCookie("sessionToken", accessToken, 3650);
                  displayCalendarWithToken(accessToken);
                } else {
                  console.error('Invalid or missing access token, re-logging in');
                  setTimeout(() => {
                    liff.login();
                  }, 1000);
                }
              } else {
                console.log("User is not logged in, initiating login");
                liff.login();
              }
            }).catch((err) => {
              console.error('LIFF initialization failed', err);
              setTimeout(() => {
                console.log('Retrying LIFF initialization');
                liff.init({ liffId: "2003779201-OwqpG72P" });
              }, 3000);
            });
          } else {
            console.log("LIFF SDKが利用できません。Webブラウザ用の処理を実行します。");
          }
        }
      });
    </script>
  </body>
</html>